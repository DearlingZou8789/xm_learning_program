MySql必知必会

1.了解SQL

数据库基础

什么是数据库

表

列和数据类型

行

主键

主键通常定义在表的一列上，但这并不是必需的，也可以一起使用多个列作为主键。在使用多列作为主键时，上述条件必需应用到构成主键的所有列，所有列值的组合必须是唯一的（但单个列的值可以不唯一）。 
 
需要注意的地方： 
1.不更新主键列中的值 
2.不重用主键列的值 
3.不在主键列中使用可能会更改的值。 


什么是SQL

SQL 是一种专门用来数据库通信的语言      


2.MySQL简介

客户机-服务器软件

MySQL版本

4--InnoDB 引擎，增加事务处理，并，改进全文本搜索等的支持 
4.1--对函数库，子查询（第14章）、集成帮助等的重要增加 
5--存储过程（第23章），触发器（第25章），游标（第24章），视图（第22张）等。 


Subtopic

MySQL工具

mysql命令行实用程序

￼ 


MySQL Administrator

￼ 


MySQL Query Browser

￼ 


3.使用MySQL

连接

选择数据库

use users;     // 选择 users 数据库 


了解数据库和表

show databases;     // 显示数据库 
use users;     // 选择 users 数据库 
show tables;     // 显示 users 中的所有表 
 
show columns from users;     //显示表列 
 
￼ 


4.检索数据

SELECT语句

检索单个列

select prod_name from products; 
 
￼ 


检索多个列

￼ 


检索所有列

select * from products; 


检所不同行

select distinct vend_id from products; 
 
select distinct vend_id 告诉 MySQL 只返回不同的 vend_id 行。 
DISTINCT关键字，它必须直接放在列名的前面。 


限制结果

limit 子句 
 
select prod_name from products limit 5; 
select prod_name from products limit 5, 5; 


使用完全限定的表名

select products.prod_name from products; 


5.排序检索数据

1.排序数据

select prod_name from products order by prod_name; 


2.按多个列排序

select prod_id, prod_price, prod_name from products order by prod_price, prod_name; 


3.指定排序方向

select prod_id, prod_price, prod_name from products order by prod_price DESC; 
 
DESC 降序 
ASC(Ascending) 升序 


6.过滤数据

使用where子句

select prod_name, prod_price from products where prod_price = 2.50; 


where子句操作符

￼ 


检查单个值

select prod_name, prod_price from products where prod_name = 'fuses'; 


不匹配检查

select vend_id, prod_name from products where vend_id <> 1003; 


范围值检查

select prod_name, prod_price from products where prod_price between 5 and 10; 


空值检查

select prod_name from products where prod_price is null; 


7.数据过滤

组合where子句

以 AND 子句的方式或 OR 子句的方式使用 


AND操作符

select prod_id, prod_price, prod_name from products where vend_id = 1003 and prod_price <= 10; 


OR操作符

select prod_name, prod_price from products where vend_id = 1002 or vend_id = 1003; 


计算次序

select prod_name, prod_price from products where vend_id = 1002 or vend_id = 1003 and prod_price >= 10; 
 
select prod_name, prod_price from products where (vend_id = 1002 or vend_id = 1003) and prod_price >= 10; 


IN操作符

IN 操作符用来指定条件范围，范围中的每个条件都可以进行匹配。 IN 取合法值的由逗号分隔的清单，全部括在圆括号中。 
select prod_name, prod_price from products where vend_id IN (1002, 1003) order by prod_name; 
 
IN where 子句中用来指定要匹配值的清单的关键字，功能与OR相当 


NOT操作符

where 子句中的NOT操作符有且只有一个功能，那就是否定它之后所跟的任何条件。 
 
NOT where子句中用来否定后跟条件的关键字 
 
select prod_name, prod_price from products where vend_id not in (1002, 1003) order by prod_name; 


8.用通配符进行过滤

通配符（ wildcard) 用来匹配值的一部分的特殊字符 
 
搜索模式（ search pattern) 由字面值、通配符或两者组合构成的搜索条件 
 
未在搜索子句中使用通配符，必须使用LIKE操作符。LIKE指示MySQL后跟的搜索模式利用通配符匹配而不是直接相等匹配进行比较。 


LIKE操作符

百分号(%)通配符

select prod_id, prod_name from products where prod_name like 'jet%'; 


%表示任何字符出现任意次数

下划线(_)通配符

下划线的用途与%一样，但下划线只匹配单个字符而不是多个字符

使用通配符的技巧

￼      


9.用正则表达式进行搜索

正则表达式介绍

使用MySQL正则表达式

基本字符匹配

 
select prod_name from products where prod_name regexp '1000'; 
 
select prod_name from products where prod_name regexp '.000' order by prod_name; 
 
 
比较： 
select prod_name from products where prod_name like '1000' order by prod_name; 
 
select prod_name from products where prod_name regexp '1000' order by prod_name; 
like 匹配整个列。如果被匹配的文本在列值中出现，LIKE将不会找到他，相应的行也不被返回（除非使用通配符）。而REGEXP在列值内进行匹配，如果被匹配的文本在列值中出现，REGEXP将会找到它，相应的行将被返回。 
 
REGEXP定位整行，使用^和$定位符（anchor)即可 


使用关键字REGEXP进行正则表达式匹配

进行OR匹配

selec prod_name from products where prod_name REGEXP '1000|2000' order by prod_name; 


使用|

匹配几个字符之一

匹配任何单一字符 
 
select prod_name from products where prod_name REGEXP '[123] Ton' order by prod_name; 


匹配范围

select prod_name from products where prod_name REGEXP '[1-5] Ton' order by prod_name; 


集合可用来定义要匹配的一个或多个字符

匹配特殊字符

正则表达式语言由具有特定含义的特殊字符构成。 
 
select vend_name from vendors where vend_name REGEXP '.' order by vend_name; 
 
为了匹配特殊字符，必须用\\为前导。\\-表示查找-, \\.表示查找. 
￼ 


匹配字符类

￼ 


匹配多个实例

￼ 
 
select prod_name from products where prod_name REGEXP '\\([0-9] sticks?\\)' order by prod_name; 
 
select prod_name from products where prod_name REGEXP '[[:digit:]]{4}' order by prod_name; 


定位符

￼ 
 
select prod_name from products where prod_name REGEXP '^[0-9\\.]' order by prod_name; 


匹配特定位置的文本

10.创建计算字段

计算字段

拼接字段

Concat( 拼接 ), 
RTrim() 去掉右边空白， 
as（使用别名), 
 


将值联结到一起构成单个值， Concat()函数来拼接两个列

执行算术计算

select prod_id, quantity, item_price, quantity*item_price as expanded_price from orderitems where order_num = 20005; 
 
￼ 


11.使用数据处理函数

函数

使用函数

1. 用于处理文本串（如删除或填充值，转换值为大写或小写）的文本函数 
2.用于在数值数据上进行算术操作（如返回绝对值，进行代数运算）的数值函数 
3.用于处理日期和时间值并从这些值中提取特定成分（例如，返回两个日期只差，检查日期有效性等）的日期和时间函数 
4.返回DBMS正使用的特殊信息（如返回用户登录信息，检查版本细节）的系统函数。 


文本处理函数

￼ 
￼ 


日期和时间处理函数


 
￼ 
￼ 
 
select cust_id, order_num from orders where order_date = '2005-09-01'; 
 
select cust_id, order_num from orders where Date(order_date) between '2005-9-1' and '2005-9-30'; 


数值处理函数

￼ 


12.汇总数据

聚集函数

（aggregate function)运行在行组上，计算和返回单个值的函数

￼ 


avg()平均函数

count()函数

如果指定列名，则 DISTINCT 只能用于 COUNT().DISTINCT 不能用于 count(*), 因此不允许使用 COUNT(DISTINCT), 否则会产生错误。类似地， DISTINCT 必须使用列名，不能用于计算或表达式。 


max()函数

min()函数

sum()函数

聚集不同值

组合聚集函数

select count(*) as num_items, 
     min(prod_price) as price_min, 
     max(prod_price) as price_max, 
     avg(prod_price) as price_avg 
from products; 


13.分组数据

数据分组

创建分组

select * from products group by prod_name; 
 
1.group by 子句可以包含任意数目的列。这使得能对分组进行嵌套，为数据愤怒提供更细致的控制 
2. 如果在 group by 子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算 
3.group by子句中列出的每个列都必须是检索列或有效的表达式。如果在select中使用表达式，则必须在group by子句中指定相同的表达式。不能使用别名。 
4.除聚集计算语句外，select语句中的每个列都必须在group by子句中给出 
5.如果分组列中具有NULL值，则NULL将作为一个分组返回。如果列中有多行NULL值，它们将分为一组。 
6.group by子句必须出现在where子句之后，order by子句之前。 
 
使用ROLLUP 使用WITH ROLLUP关键字，可以得到每个分组以及每个分组汇总级别（针对每个分组）的值，如下所示: 
select vend_id, count(*) as num_prods from product group by vend_id with rollup; 


过滤分组

having 子句 
 
where 过滤行，而 having 过滤分组 
 
having 和 where 的差别：这里有另一种理解方法， where 在数据分组前进行过滤， having 在数据分组后进行过滤。这是一个重要的区别， where 排除的行不包括在分组中。这可能会改变计算值，从而影响 having 子句中基于这些值过滤掉的分组。 


分组和排序

￼ 


select子句排序

 ￼ 
￼ 


14.使用子查询

子查询

利用子查询进行过滤

select cust_name, cust_contact from customers where cust_id in (select cust_id from orders where order_num in (select order_num from orderitems where prod_id = 'TNT2')); 


作为计算字段使用子查询

select cust_name, cust_state, (select count(*) from orders where orders.cust_id = customers.cust_id) as orders from customers order by cust_name; 


15.联结表

联结

关系表

维护引用完整性 : 
重要的是，要理解联结不是物理实体。换句话说，它在实际的数据库表中不存在。联结由MySQL根据需要建立，它存在于查询的执行当中。 
在使用关系表时，仅在关系列中插入合法的数据非常重要。 


外键(foreign key)

外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。

可伸缩性(scale)

能够适应不断增加的工作量而不失败。涉及良好的数据库或应用程序称之为可伸缩性好

创建联结

where子句的重要性

笛卡尔积 (cartesian product) ：由没有联结条件的表关系返回的结果为笛卡尔积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。 
 
select vend_name, prod_name, prod_price from vendors, products order by vend_name, prod_name; 


内部联结

select vend_name, prod_name, prod_price from vendors inner join products on vendors.vend_id = products.vend_id; 
 
这里，两个表之间的关系是 from 子句的组成部分，以 inner join 指定。在使用这种语法时，联结条件用特定的ON子句而不是where子句给出。传递给on的实际条件与传递给where的相同。 


联结多个表

select prod_name, vend_name, prod_price, quantity from orderitems, products, vendors where products.vend_id = vendors.vend_id and orderitems.prod_id = products.prod_id 
and order_num = 20005; 
 


16.创建高级联结

使用表别名

select concat(RTrim(vend_name), '(', RTrim(vend_country), ')') as vend_title from vendors order by vend_name; 


使用不同类型的联结

自联结

select p1.prod_id, p1.prod_name from products as p1, products as p2 where p1.vend_id = p2.vend_id and p2.prod_id = 'DTNTR' 
 
用自联结而不用子查询： 
自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句。虽然最终的结果是相同的，但有时候处理联结远比处理子查询快得多。 


自然联结

select c.*, o.order_num, o.order_date, oi.prod_id, oi.quantity, OI.item_price from customers as c, orders as o, orderitems as oi where c.cust_id = o.cust_id and oi.order_num = o.order_num and prod_id = 'FB'; 


外部联结

联结包含了那些在相关表中没有关联行的行。这种类型的联结称为外部联结 
 
select customers.cust_id, orders.order_num from customers left outer join orders on customers.cust_id = orders.cust_id; 
 
这条select语句使用了关键字outer join来指定联结的类型（而不是在where子句中指定）。但是，与内部联结关联两个表中的行不同的是，外部联结还包括没有关联行的行。在使用outer join语法时，必须使用right或left关键字指定包括其所有行的表（RIGHT支出的是outer join右边的表，而LEFT指出的是OUTER JOIN左边的表）。上面的例子使用LEFT OUTER JOIN从from子句的左边表（customers表）中选择所有航。为了从右边的表中选择所有行，应该使用RIGHT OUTER JOIN，如下列所示: 
select customers.cust_id, orders.order_num from customers RIGHT OUTER JOIN orders on orders.cust_id = customers.cust_id; 


外部联结的类型：存在两种基本的外部联结形式：左外部联结和右外部联结。它们之间的唯一差别是所有关联的表的顺序不同。换句话说，左外部联结可通过颠倒FROM或where子句中表的顺序转换为右外部联结。因此，两种类型的外部联结可互换使用，而究竟使用哪一种纯粹是根据方便而定。

使用带聚集函数的联结

select customers.cust_name, customers.cust_id, count(orders.order_num) as num_ord from customers inner join orders on customers cust_id = orders.cust_id group by customers.cust_id; 


使用联结和联结条件

1. 注意所使用的联结类型。一般我们使用内部联结，但是用外部联结也是有效的。 
2. 保证使用正确的联结条件，否则将返回不正确的数据 
3. 应该总是提供联结条件，否则会得出笛卡尔积 
4.在一个联结中可以包含多个表。甚至对于每个联结可以采用不同的联结类型。虽然这样做事合法的，一般也很有用，但应该在一起测试他们前，分别测试每个联结。这将使故障排除更为简单。 


17.组合查询

组合查询

MySQL 允许执行多个查询（多条 select 语句），并将结果作为单个查询结果集返回。这些组合查询通常称为并（union)或复合查询(compound query) 
 
有两种基本情况，其中需要使用组合查询： 
1.在单个查询中从不同的表返回类似结构的数据 
2.对单个表执行多个查询，按单个查询返回数据 
 
组合查询和多个where条件:多数情况下，组合相同表的两个查询完成的工作与具有多个where子句条件的单条查询完成的工作相同。换句话说，任何具有多个where子句的select语句都可以作为一个组合查询给出，在以下段落中可以看到这一点。这两种技术在不同的查询中性能也不同。因此，应该试一下这两种技术，以确定对特定的查询哪一种性能更好。 


创建组合查询

可用 UNION 操作符来组合数条SQL查询。 


使用UNION

1.select vend_id, prod_id, prod_price from products where prod_price <= 5; 
 
2. select vend_id, prod_id, prod_price from products where vend_id in (1001, 1002); 
 
3. select vend_id, prod_id, prod_price from products where prod_price <= 5 union 
  select vend_id, prod_id, prod_price from products where vend_id in (1001, 1002); 


UNION规则

1.UNION 必须由两条或两条以上的 select 语句组成，语句之间用关键字 UNION 分隔 . 
2.UNION 中的每个查询必须包含相同的列，表达式或聚集函数（不过各个列不需要以相同的次序列出 ) 
3. 列数据类型必须兼容：类型不必完全相同，但必须是 DBMS 可以隐含地转换的类型。 


包含或取消重复的行

使用 UNION ALL, MySQL 不取消重复的行。 
 
UNION 与 WHERE ：本章开始时说过， UNION 几乎总是完成与多个 where 条件相同的工作。 UNION ALL 为 UNION 的一种形式，它完成WHERE子句完成不了的工作。如果确实需要每个条件的匹配行全部出现 ( 包括重复行），则必须使用 UNION ALL 而不是 where. 


对组合查询结果排序

select vend_id, prod_id, prod_price from products where prod_price <= 5  
union 
select vend_id, prod_id, prod_price from products where vend_id in (1001, 1002) 
order by vend_id, prod_price; 


18.全文本搜索

理解全文本搜索

使用全文本搜索

启用全文本搜索支持

create table productnotes 
( 
note_id int not null auto_increment, 
prod_id char(10) not null, 
note_date datetime not null, 
note_text text null, 
primary key(note_id), 
fulltext(note_text) 
) engine = MyISAM; 


进行全文本搜索

select note_text from productnotes where match(note_text) against('rabbit'); 
 
使用完整的 Match() 说明 : 传递给 Match() 的值必须与 FULLTEXT() 定义中的相同。如果指定多个列，则必须列出它们。 
 
搜索不区分大小写:除非使用binary方式，否则全文本搜索不区分大小写。     
 
select note_text from productnotes where note_text like '%rabbit%'; 
 
select note_text, Match(note_text) Against('rabbit') as rank from productnotes; 


使用查询扩展

select note_text from productnotes where Match(note_text) Against('anvils'); 


布尔文本搜索

1. 要匹配的词 
2.要排斥的词 
3.排列提示 
4.表达式分组 
 
select note_text from productnotes where Match(note_text) Against('heavy' in boolean mode); 
 
￼ 


全文本搜索的使用说明

1. 在索引全文本数据时，短语被忽略切从索引中排除。短语定义为那些具有 3 个或 3 个以下字符的词 
2.MySQL带有一个内建的非用词（stopword)列表，这些词在索引全文本数据时总是被忽略 
3.许多词出现的频率很高，搜索它们没有用处。因此，MySQL规定了一条50%规则，如果一个词出现在50%以上的行中。则将它作为一个非用词忽略。 
4.如果表中的行数少于3行，则全文本搜索不反悔结果 
5.忽略词中的单引号 
6.不具有词分隔符的语言不能恰当地返回全文本搜偶所结果 
7.仅在MyISAM数据引擎中支持全文本搜索。 


19.插入数据

数据插入

插入完整的行

insert into customers values(NULL, 'Pep E. LaPew', '100 Main Street', 'Los Angeles', 'CA', '90046', 'USA', NULL, NULL); 


插入多个行

insert into customers values(NULL, 'Pep E. LaPew', '100 Main Street', 'Los Angeles', 'CA', '90046', 'USA', NULL, NULL) , (NULL, 'Pep E. LaPew1', '1000 Main Street', 'Los Angeles', 'CA', '90046', 'USA', NULL, NULL) ; 


插入检索出的数据

20.更新和删除数据

更新数据

命令 :UPDATE 
1. 更新表中特定行 
2.更新表中所有行 
 
update users set mobile = 13857437482 where id = 1; 


删除数据

DELETE 语句 
 
1. 从表中删除特定的行 
2. 从表中删除所有行 
 
delete from customers where cust_id = 1006; 


更新和删除的指导原则

1. 除非确实打算更新和删除每一行，否则绝对不要使用不带 where 子句的 update 或 delete 语句 
2. 保证每个表都有主键，尽可能像 where 子句那样使用它 
3. 在对 update 或 delete 语句使用 where 子句前，应该先用 select 进行测试，保证它过滤的是正确的记录，以防编写的 where 子句不正确 
4. 使用强制实施引用完整性的数据库，这样 MySQL 将不允许删除具有与其他表相关联的数据的行。 


21.创建和操纵表

创建表

表创建基础

1. 新表的名字，在关键字 create table 之后给出 
2. 表列的名字和定义，用逗号分隔。 
 
DROP TABLE IF EXISTS `events`; 
CREATE TABLE `events` ( 
  `id` int(11) NOT NULL AUTO_INCREMENT, 
  `creator_id` int(11) NOT NULL COMMENT '创建人user_id', 
  `organize_id` int(11) NOT NULL COMMENT '社团group_id', 
  `organize_name` varchar(100) COLLATE utf8_bin NOT NULL, 
  `subject` varchar(255) COLLATE utf8_bin NOT NULL, 
  `description` varchar(2000) COLLATE utf8_bin NOT NULL, 
  `start_time` datetime NOT NULL, 
  `end_time` datetime NOT NULL, 
  `address` varchar(255) COLLATE utf8_bin NOT NULL, 
  `status` tinyint(1) NOT NULL COMMENT '0.新创建；1.已发布；2.已结束', 
  `join_type` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1.仅本社团成员报名；2.允许非社团成员报名；', 
  `allow_multi_groups` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '0' COMMENT '是否允许多社团参与； 0:不允许，1:允许', 
  `qecode` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '二维码base64编码', 
  `join_cnt` int(5) NOT NULL DEFAULT '0' COMMENT '参与人数', 
  `follow_cnt` int(5) NOT NULL DEFAULT '0' COMMENT '关注人数', 
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, 
  PRIMARY KEY (`id`) 
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='活动主表'; 


语句格式化

create table 语句就是语句格式化的一个很好的例子，它被安排在多个行上，其中的列定义进行了恰当的缩进，以便阅读和编辑。以何种缩进格式安排SQL语句没有规定，但我强烈推荐采用某种缩进格式。 


使用NULL值

主键再介绍

主键值必须唯一。即，表中的每个行必须具有唯一的主键值。如果主键使用单个列，则它的值必须唯一。如果使用多格列，则这些咧的组合值必须唯一。 


使用AUTO_INCREMENT

AUTO_INCREMENT 告诉 MySQL, 本列每当增加一行时自动增量。每次执行一个 INSERT 操作时，MySQL自动对该列增量(从而才有这个关键字AUTO_INCREMENT),给该列赋予下一个可用的值。 


指定默认值

qu antity int not NULL default 1, 
 


与大多数DBMS不一样，MySQL不允许使用函数作为默认值，他只支持常量

引擎类型

1.InnoDB 是一个可靠的事务处理引擎，它不支持全文本搜索 
2.Memory 在功能等同于 MyISAM, 但由于数据存储在内存中，速度很快 
3.MyISAM 是一个性能极高的引擎，它支持全文本搜索，但不支持事务处理 


更新表

ALTER Table 语句 
 
1. 在 ALTER TABLE 之后给出要更改的表名 
2.所做更改的列表 
 
alter table vendors add vend_phone char(20); 


删除表

DROP table; 
 
drop table customers2; 


重命名表

rename table 
 
rename table customers2 to customers; 


22.使用视图

视图

虚拟的表

为什么使用视图

1. 重用 SQL 语句 
2. 简化复杂的 SQL 操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节。 
3. 使用表的组成部分而不是整个表 
4. 保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。 
5. 更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据 


视图的规则和限制

1. 与表一样，视图必须唯一命名（不能给视图取别的视图或表相同的名字) 
2.对于可以创建的视图数目没有限制 
3.为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予 
4.视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图 
5.order by可以用在视图中，但如果从该视图检索数据select中也包含order by,那么该视图中的order by将被覆盖。 
6.视图不能索引，也不能有关联的触发器或默认值 
7.视图可以和表一起使用。例如，编写一条联结表和视图的select语句。 


使用视图

1. 视图用 create view 语句来创建 
2. 使用 show create view viewname; 来查看创建视图的语句 
3. 用 drop 删除视图，其语法为 drop view viewname; 
4. 更新视图时，可以先用 drop 再用 create, 也可以直接用 create or replace view. 如果要更新的视图不存在，则第二条更新语句会创建一个视图，如果要更新的视图存在，则第二条更新语句会替换原有视图。 


一般，应该将视图用于检索(select语句)而不用于更新(insert, update和delete)

利用视图简化复杂的联结

create view productcustomers as  
select cust_name, cust_contact, prod_id from customers, orders, orderitems where customers.cust_id = orders.cust_id and orderitems.order_num = orders.order_num; 
 
其实就相当于别名 
 
使用方法 : 
select cust_name, cust_contact from productcustomers where prod_id = 'TNT2'; 


用视图重新格式化检索出的数据

select concat(RTrim(vend_name), '(', RTrim(vend_country), ')') as vend_title from vendors order by vend_name; 
 
create view vendorlocations as 
select concat(RTrim(vend_name), '(', RTrim(vend_country), ')') as vend_title from vendors order by vend_name; 


用视图过滤不想要的数据

create view customermaillist as select cust_id, cust_name, cust_email from customers where cust_email is not NULL; 


使用视图和计算字段

create view orderitemsexpanded as select order_num, prod_id, quantity, item_preice, quantity * item_price as expanded_price 
from orderitems; 


更新视图

基本上可以说，如果MySQL不能正确的确定被更新的技术局，则不允许更新（包括插入和删除）。这实际上意味着，如果视图定义中有以下操作，则不能进行视图的更新： 
1.分组(使用group by 和having) 
2.联结 
3.子查询 
4.并 
5.聚集函数(min(), count(), sum()等）； 
6.distinct; 
7.导出(计算)列。 


23.使用存储过程

存储过程

存储过程简单来说，就是为以后的使用而保存的一条或多条 MySQL 语句的集合。可将其视为批文件，虽然他们的作用不仅限于批处理。 


为什么要使用存储过程

1. 通过把处理封装在容易使用的单元中，简化复杂的操作 
2. 由于不要求反复建立一系列处理步骤，这保证了数据的完整性。 
3.简化对变动的管理 
4.提高性能 
5.存在一些只能用在单个请求中的MySQL元素和特性，存储过程尅使用它们来编写功能更强更灵活的代码 
 
简单，安全，高性能 


使用存储过程

执行存储过程

call productpricing(@pricelow, @pricehigh, @priceaverage); 


创建存储过程

 
delimiter // 
create procedure productpricing() 
begin 
select avg(prod_price) as priceaverage from products; 
end; 
delimiter ; 
 
调用 : 
call productpricing(); 


删除存储过程

drop procedure productpricing; 


使用参数

create procedure productpricing( 
out p1 decimal(8,2), 
out p2 decimal(8,2), 
out p3 decimal(8,2) 
) 
begin 
select min(prod_price) into p1 from products; 
select max(prod_price) into p2 from products; 
select average(prod_price) into p3 from products; 
end; 
 
调用 : 
call productpricing(@pricelow, @pricehigh, @priceaverage); 
select @priceaverage; 


建立智能存储过程

只有在存储过程内包含业务规则和智能处理时，它们的威力才真正显示出来。 


检查存储过程

使用show create procedure语句： 
show create procedure ordertotal; 


24.使用游标

游标

游标主要用于交互式应用，其中用户需要滚动屏幕上的数据，并对数据进行浏览或作出更改。 
 


MySQL游标只能用于存储过程（和函数)

使用游标

1. 在能够使用有标签，必须声明它。这个过程实际上没有检索数据，它只是定义要使用的 select 语句 
2. 一旦声明后，必须打开游标以供使用。这个过程用前面定义的 select 语句把数据实际检索出来 
3. 对于 填有 数据的游标，根据需要取出（检索）各行。 
4. 在结束游标使用时，必须关闭游标。 


创建游标

declare 命名游标 
 
create procedure processorders() 
begin 
     declare ordernumbers cursor 
     for 
     select order_num from orders; 
end; 


打开和关闭游标

open ordernumbers;     // 打开游标 
close ordernumbers;     // 关闭游标 


使用游标数据

在一个游标被打开后，可以使用 fetch 语句分别访问它的每一行。 fetch 指定检索什么数据，检索出来的数据存储在什么地方，它还向前移动游标中的内部行指针，使下一条fetch语句检索下一行。 
 
create procedure processorders() 
begin 
     declare done boolean default 0; 
     declare o int; 
     declare t decimal(8,2); 
     
     delcare ordernumbers cursor 
     for 
     select order_num from orders; 
 
     // Declare continue handler 
     declare continue handler for SQLSTATE '02000' set done=1; 
     
create table if not exists ordertotals(order_num int, total decimal(8,2)); 
 
oepn ordernumbers; 
 
repeat 
     fetch ordernumbers into o; 
     call ordertotal(o, l, t); 
     insert into ordertotals(order_num, total) values(o, t); 
     until done end repeat; 
     close ordernumbers; 
     


25.触发器

create TRIGGER newUsers AFTER insert on users for each row select 'Add New User'     
 
实测报错， Not allowed to return a result set from a trigger 


定义

触发器是MySQL响应以下任意语句而自动执行的一条MySQL语句，在INSERT,DELETE,UPDATE, before, after执行的一条语句 


使用限制

INSERT

DELETE

UPDATE

26.事务处理

定义

事务处理可以用来维护数据库的完整性，它保证成批的MySQL操作要么完全执行，要么完全不执行。 
 
 
利用事务处理，可以保证一组操作不会中途停止，它们或者作为整体执行，或者完全不执行（除非明确指示）。如果没有错误发生，整组语句提交给(谢傲）数据库表。如果发生错误，则进行回撤(rollback)以恢复数据库到某个已知且安全的状态。 


常见数据库引擎

MyISAM 和 InnoDB 是两种最常见使用的引擎。前者不支持明确的事务处理管理，而后者支持。 


术语

事务 (transaction) ：指一组 SQL 语句 
回退 (rollback) ：指撤销指定 SQL 语句的过程 
提交 (commit): 指将为存储的SQL语句结果写入数据库表 
保留点(savepoint)：指事务处理中设置的临时占位符（place-holder),你可以对它发布回退（与回退整个事务处理不同). 


Savepoint

保留点 


27.全球化和本地化

字符集

字母和符号的集合 
 
查看所支持的字符集完整列表，使用如下语句： 
show character set; 
 
 
确定所用的字符集和校对， 
show variables like 'character%'; 
show variables like 'collation%'; 


字母和符号的集合

编码

某个字符集成员的内部表示 


某个字符集成员的内部表示

校对

规定字符如何比较的指令 
 
查看所支持校对的完整列表，使用如下语句： 
show collation; 


规定字符如何比较的指令

28.安全管理

访问控制

用户应该对他们需要的数据具有适当的访问权，既不能多也不能少 
 
应考虑如下内容： 
1. 多数用户只需要对表进行读和写，但少数用户甚至需要能创建和删除表 
2.某些用户需要读表，但可能不需要更新表 
3.你可能想允许用户添加数据，但不允许他们删除数据 
4.某些用户（管理员）可能需要处理用户账号的权限，但多数用户不需要 
5.你可能想让用户通过存储过程访问数据，但不允许他们直接访问数据； 
6.你可能想根据用户登录的地点限制对某些功能的访问 
 
 


要授予的权限

被授予访问权限的数据库或表

用户名

grant 命令,授权命令 
 
//: grant 允许用户在 crashcourse.*(crashcourse 数据库的所有表）上使用 select. 通过指授予select访问权限，用户bforta对crashcourse数据库中的所有数据具有只读访问权限。 
 
grant select on crashcourse.* to bforta; 
 
revoke 是 grant 的反操作命令，用它来撤销特定的权限 
 
GRANT 和 REVOKE 可在几个层次上控制访问权限： 
1.整个服务器，使用grant all 和revoke all; 
2.整个数据库，使用on database.*; 
3.特定的表，使用on database.table; 
4.特定的列； 
5.特定的存储过程。 
 
￼ 


用户管理

创建一个新用户账号，使用create user 
create user ben identified by 'p@$$wOrd' 
 
修改用户名 
rename user ben to bforta; 
 
删除用户账号: 
drop user bforta; 


29.数据库维护

备份数据

1.使用命令行实用程序 mysqldump 转储所有数据库内容到某个外部文件。在进行常规备份前这个实用程序应该正常运行，以便能正确备份转储文件。 
 
2.可用命令行实用程序mysqlhotcopy从一个数据库复制所有数据（并非所有数据库引擎都支持这个实用程序) 
 
3.使用mysql的backup table或select into outfile转储所有数据到某个外部文件。这两条语句都接收将要创建的系统文件名，此系统文件必须不存在，否则会出错。数据可以用restore table来恢复。 


进行数据库维护

1.analyze table     // 检查表键是否正确 
2.check table 用来针对许多问题对表进行检查。 
 
 
2.1如果 MyISAM 表访问产生不正确和不一致的结果，可能需要用 repair table 来修复相应的表。这条语句不应该经常使用，如果需要经常使用，可能会有更大的问题要解决。 
2.2如果从一个表中删除大量数据，应该使用optimize table来收回所用的控件，从而优化表的性能。 


诊断启动问题

查看日志文件

错误日志

日志名字 hostname.err, 位于 data 目录中。此日志名可用 --log-error 命令行选项更改 


查询日志

日志通常名为 hostname.log, 位于 data 目录中。此名字可以用 --log 命令行选项更改 


二进制日志

日志通常名为 hostname-bin, 位于 data 目录内。此名可以用 --log-bin 命令选项更改。注意，这个日志文件是MySQL5中添加的。 


缓慢查询日志

此日志记录执行缓慢的任何查询。这个日志在确定数据库何处需要优化很有用。此日志通常名为 hostname-slow.log, 位于 data 目录中。此名字可以用 --log-slow-queries 命令行选项更改。 


30.改善性能

附录

数据类型

串数据类型

￼ 


数值数据类型

￼ 


日期和时间数据类型

￼ 


二进制数据类型

￼ 
